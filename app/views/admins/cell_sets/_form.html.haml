:ruby
  content_for(:custom_style) do
    "gridStyle"
  end
  content_for(:custom_script) do
    "gridEditor" if @cell_set.persisted?
  end
  content_for(:custom_javascript) do
    "APPLICATION.cells = #{render('cells.json')};".html_safe
  end
  options ||= {}
  options.merge!({
    publishing_logic: f.object.respond_to?(:published_flag),
  })

.form-inputs
  = render "admins/#{view_dir_for(f.object)}/form_content", f: f

  - if options[:publishing_logic]
    .bubblebox
      %section.publishing.bubble
        .page-header
          %h2= t('form.publish')
        = render 'admins/shared/publishing', f: f, resource: f.object #, no_publishing_end_date: true

.row-fluid
  - if f.object.persisted?
    %section.grid-editor.span12
      .main-content-wrapper.bubblebox
        .main-content.bubble
          .row-fluid
            #columnButtons
            #boundsForGrid
              #grid

            #rowButtons

            #tabs
              %ul
                %li
                  %a(href="#usedContentCells")= t('set.tabs.used_cells')
                %li
                  %a(href="#availableContentCells")= t('set.tabs.available_cells')
                %li
                  %a(href="#youtubeContentCells")= "YouTube"
                %li
                  %a(href="#pbaContentCells" title="Pina Bausch Archive")= "Pina Bausch"
                %li
                  %a(href="#pm2ContentCells" title="Piecemaker 2")= "Piecemaker"
                %li
                  %a(href="#vueExample" title="Vue Example")= "Vue Example"

              #usedContentCells
                %h3= t('set.tabs.used_cells')
                #usedContentCellTable.cellTable

              #availableContentCells
                %h3= t('set.tabs.available_cells')
                #filter
                  %label(for="searchTerm")
                    = t('grid_editor.filter.title')
                  %select#cellType
                    %option(value="all")
                      = t('grid_editor.filter.all_types')
                    - Cell::TYPES.each do |type|
                      %option{value: type}= type.to_s.humanize

                  %label= t('grid_editor.filter.containing')
                  %input(type="text" id="searchTerm" name="searchTerm" spellcheck="false" autocorrect="off" value="" autocapitalize="off")

                #availableContentCellTable.cellTable

              #youtubeContentCells
                #searchYouTube.table-header-form
                  %form
                    %input(type="text" id="searchTermYT" name="searchTerm" spellcheck="false" autocorrect="off" value="" autocapitalize="off")
                    %button= "Search"

                #youtubeContentCellTable.cellTable
              
              #pbaContentCells
                #navPbArchive.table-header-form
                  %a#pieces(href="#")= "St√ºcke"
                  %a#people(href="#")= "Personen"
                  %a#locations(href="#")= "Orte"

                #pbaContentCellTable.cellTable

              #pm2ContentCells
                .table-header-form
                  %a.pm2-groups(href="")= "Groups"
                .video-container
                .event-filters
                  %form
                    %input(type="text" id="searchEvents" name="searchTerm" spellcheck="false" autocorrect="off" value="" autocapitalize="off")
                    %button= "Filter"
                .events-container.cellTable
                  .loading
                    %h4= "Loading Groups"

            = render "edit_cell"

            = render "delete_cell"

            #emptyCell.cell

%script(src="https://apis.google.com/js/client.js?onload=googleApiClientReady")
